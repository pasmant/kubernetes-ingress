name: Build Plus

on:
  workflow_call:
    inputs:
      platforms:
        required: true
        type: string
      image:
        required: true
        type: string
      tag:
        required: false
        type: string
      go-md5:
        required: true
        type: string
      base-image-md5:
        required: false
        type: string
      branch:
        required: false
        type: string
      nap-modules:
        required: false
        type: string
      target:
        required: true
        type: string
      authenticated:
        required: true
        type: boolean
      full-build:
        description: Always build base image
        type: boolean
        default: false
      ic-version:
        required: false
        type: string

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: read # for docker/build-push-action to read repo content
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      id-token: write # for OIDC login to AWS
      pull-requests: write # for scout report
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0

      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
        with:
          platforms: arm64,s390x

      - name: Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@8254fb75a33b976a221574d287e93919e6a36f70 # v2.1.6
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCR_WORKLOAD_IDENTITY }}
          service_account: ${{ secrets.GCR_SERVICE_ACCOUNT }}
        if: ${{ inputs.authenticated }}

      - name: Login to GCR
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
        if: ${{ inputs.authenticated }}

      - name: NAP modules
        id: nap_modules
        run: |
          [[ "${{ inputs.nap-modules }}" == "waf,dos" ]] && modules="waf-dos" || name="${{ inputs.nap-modules }}"
          [[ "${{ inputs.nap-modules }}" == "waf,dos" ]] && modules="both" || modules="${{ inputs.nap-modules }}"
          echo "modules=${modules}" >> $GITHUB_OUTPUT
          echo "name=${name}" >> $GITHUB_OUTPUT
        if: ${{ inputs.nap-modules != '' }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: |
            name=gcr.io/f5-gcs-7899-ptg-ingrss-ctlr/dev/nginx-ic${{ contains(inputs.nap-modules, 'dos') && '-dos' || '' }}${{ contains(inputs.nap-modules, 'waf') && '-nap' || '' }}${{ contains(inputs.image, 'v5') && '-v5' || '' }}/nginx-plus-ingress
          flavor: |
            suffix=${{ contains(inputs.image, 'ubi') && '-ubi' || '' }}${{ contains(inputs.image, 'alpine') && '-alpine' || '' }}${{ contains(inputs.target, 'aws') && '-mktpl' || '' }}${{ contains(inputs.image, 'fips') && '-fips' || ''}}
          tags: |
            type=raw,value=${{ inputs.tag }}
          labels: |
            org.opencontainers.image.description=NGINX Plus Ingress Controller for Kubernetes
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Check if base images exist
        id: base_exists
        run: |
          base_image="gcr.io/f5-gcs-7899-ptg-ingrss-ctlr/dev/nginx-ic-base/plus:${{ inputs.base-image-md5 }}-${{ inputs.image }}${{ steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '' }}${{ contains(inputs.image, 'v5') && '-v5' || '' }}"
          echo "image=${base_image}" >> $GITHUB_OUTPUT
          if docker pull ${base_image}; then
            echo "exists=true" >> $GITHUB_OUTPUT
          fi
        if: ${{ inputs.authenticated && ! inputs.full-build }}

      - name: Build Base Container
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        with:
          file: build/Dockerfile
          context: "."
          cache-to: type=gha,scope=${{ inputs.image }}${{ steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '' }},mode=max
          target: common
          tags: ${{ steps.base_exists.outputs.image }}
          platforms: ${{ inputs.platforms }}
          pull: true
          push: true
          no-cache: true
          build-args: |
            BUILD_OS=${{ inputs.image }}
            IC_VERSION=${{ inputs.ic-version && inputs.ic-version || steps.meta.outputs.version }}
            ${{ inputs.nap-modules != '' && format('NAP_MODULES={0}', steps.nap_modules.outputs.name) || '' }}
          secrets: |
            "nginx-repo.crt=${{ inputs.nap-modules != '' && secrets.NGINX_AP_CRT || secrets.NGINX_CRT }}"
            "nginx-repo.key=${{ inputs.nap-modules != '' && secrets.NGINX_AP_KEY || secrets.NGINX_KEY }}"
            ${{ inputs.nap-modules != '' && contains(inputs.image, 'ubi') && format('"rhel_license={0}"', secrets.RHEL_LICENSE) || '' }}
        if: ${{ inputs.authenticated && steps.base_exists.outputs.exists != 'true' }}

      - name: Check if target image exists
        id: target_exists
        run: |
          if docker pull ${{ steps.meta.outputs.tags }}; then
            echo "exists=true" >> $GITHUB_OUTPUT
          fi
        if: ${{ inputs.authenticated && ! inputs.full-build }}

      - name: Debug values
        run: |
          echo "authenticated: ${{ inputs.authenticated }}"
          echo "base_exists: ${{ steps.base_exists.outputs.exists }}"
          echo "target_exists: ${{ steps.target_exists.outputs.exists }}"
          echo "full-build: ${{ inputs.full-build }}"
          echo "all: ${{ inputs.authenticated || steps.base_exists.outputs.exists != 'true' || steps.target_exists.outputs.exists != 'true' }}"

      - name: Fetch Cached Artifacts
        uses: actions/cache@3624ceb22c1c5a301c8db4169662070a689d9ea8 # v4.1.1
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ inputs.go-md5 }}
          fail-on-cache-miss: true
        if: ${{ inputs.authenticated || steps.base_exists.outputs.exists != 'true' || steps.target_exists.outputs.exists != 'true' }}

      - name: Build Docker image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        id: build-push
        with:
          file: build/Dockerfile
          context: "."
          cache-from: type=gha,scope=${{ inputs.image }}${{ steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '' }}
          cache-to: type=gha,scope=${{ inputs.image }}${{ steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '' }},mode=max
          target: ${{ inputs.target }}${{ inputs.authenticated && '-prebuilt' || '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          platforms: ${{ inputs.platforms }}
          load: false
          push: ${{ inputs.authenticated }}
          pull: true
          sbom: ${{ inputs.authenticated }}
          provenance: false
          build-args: |
            BUILD_OS=${{ inputs.image }}
            ${{ inputs.authenticated && format('PREBUILT_BASE_IMG={0}', steps.base_exists.outputs.image ) }}
            IC_VERSION=${{ inputs.ic-version && inputs.ic-version || steps.meta.outputs.version }}
            ${{ inputs.nap-modules != '' && format('NAP_MODULES={0}', steps.nap_modules.outputs.name) || '' }}
            ${{ (contains(inputs.target, 'aws') && inputs.nap-modules != '') && format('NAP_MODULES_AWS={0}', steps.nap_modules.outputs.modules) || '' }}
            ${{ contains(inputs.image, 'v5') && 'WAF_VERSION=v5' || '' }}
          secrets: |
            "nginx-repo.crt=${{ inputs.nap-modules != '' && secrets.NGINX_AP_CRT || secrets.NGINX_CRT }}"
            "nginx-repo.key=${{ inputs.nap-modules != '' && secrets.NGINX_AP_KEY || secrets.NGINX_KEY }}"
            ${{ contains(inputs.image, 'ubi') && format('"rhel_license={0}"', secrets.RHEL_LICENSE) || '' }}
        if: ${{ steps.base_exists.outputs.exists != 'true' || steps.target_exists.outputs.exists != 'true' }}

      - name: Make directory for security scan results
        run: |
          mkdir -p "${{ inputs.image }}-results/"

      - name: Extract image name for Scans
        id: scan-tag
        run: |
          tag=$(echo $DOCKER_METADATA_OUTPUT_JSON | jq -r '[ .tags[] | select(contains("f5-gcs-7899"))] | .[0]')
          echo "tag=$tag" >> $GITHUB_OUTPUT
        if: ${{ inputs.authenticated && steps.build-push.conclusion == 'success' }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@a20de5420d57c4102486cdd9578b45609c99d7eb # 0.26.0
        continue-on-error: true
        with:
          image-ref: ${{ steps.scan-tag.outputs.tag }}
          format: "sarif"
          output: "${{ inputs.image }}-results/trivy.sarif"
          ignore-unfixed: "true"
        if: ${{ inputs.authenticated && steps.build-push.conclusion == 'success' }}

      - name: DockerHub Login for Docker Scount
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: ${{ inputs.authenticated && steps.build-push.conclusion == 'success' }}

      - name: Run Docker Scout vulnerability scanner
        id: docker-scout
        uses: docker/scout-action@cc6bf8dd03587425ef920278b3e2726ba8d791e8 # v1.14.0
        continue-on-error: true
        with:
          command: cves,recommendations
          image: ${{ steps.scan-tag.outputs.tag }}
          ignore-base: true
          only-fixed: true
          sarif-file: "${{ inputs.image }}-results/scout.sarif"
          write-comment: false
          github-token: ${{ secrets.GITHUB_TOKEN }} # to be able to write the comment
          summary: true
        if: ${{ inputs.authenticated && steps.build-push.conclusion == 'success' }}

      - name: Upload Scan Results
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        continue-on-error: true
        with:
          name: "${{ inputs.image }}-results"
          path: "${{ inputs.image }}-results/"
        if: ${{ inputs.authenticated && steps.build-push.conclusion == 'success' }}
